[{"authors":null,"categories":null,"content":"I\u0026rsquo;m a final year Information Systems Engineering student at TU Dresden. I have previous work experience in embedded systems and artificial intelligence from internships at Kernkonzept, Zeiss and SONOTEC. I\u0026rsquo;ve also been a student assistant at the cfaed Vodafone Chair for Mobile Communications Systems and the Chair for Compiler Construction. For an impression of the technologies I have worked with, take a look at some of the projects I have completed.\n  Download my resume.\n  Download my transcript of records.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"d6820910f8e58fe6f3a219224182a640","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I\u0026rsquo;m a final year Information Systems Engineering student at TU Dresden. I have previous work experience in embedded systems and artificial intelligence from internships at Kernkonzept, Zeiss and SONOTEC. I\u0026rsquo;ve also been a student assistant at the cfaed Vodafone Chair for Mobile Communications Systems and the Chair for Compiler Construction.","tags":null,"title":"Timo Nicolai","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"238209b050e7c5e739eaa3a5b6e093e6","permalink":"/project/mpsym/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/mpsym/","section":"project","summary":"Improving mapping of computational tasks to manycore architectures using computational group theory. MPsym can determine whether different mappings are equivalent due to symmetries of an architecture's topology. Works efficiently with large, hierarchical architectures and can be used to improve existing mapping discovery algorithms by making them \"symmetry aware\". Implemented in C++ for performance with easy to use Python bindings.","tags":["C","Python"],"title":"MPsym","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"2207b00bc8eec46ddcd48d21b2a04f0e","permalink":"/project/colorization/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/colorization/","section":"project","summary":"A from-scratch PyTorch implementation of the convolutional neural network described by Zhang et al. in [Colorful Image Colorization](https://arxiv.org/abs/1603.08511). Can be used with pretrained weights or trained from scratch. Also includes an implementation of Google's DeepLab-V3+ network that can be substituted for the default VGG network.","tags":["Python"],"title":"Colorful Image Colorization in PyTorch","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"93434e240dee2b4242ed5d8ef7d5774f","permalink":"/project/cppbind/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/cppbind/","section":"project","summary":"An extensible program for automatically generating language bindings to C++. Similar to SWIG but with a much smaller codebase due to the use of the Clang AST API as a frontend. Currently supports C and Lua and additional backends can be implemented dynamically with Python.","tags":["C"],"title":"CPPBind","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4e9999704d17fc32fe2f4549cc31a067","permalink":"/project/z80-verilog/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/z80-verilog/","section":"project","summary":"A Verilog implementation of a Z80 compatible CISC processor architecture. Originally intended for ASIC synthesis, now also makes it possible to simulate execution of arbitrary compiled C programs with Icarus Verilog. Also includes `ictest`, a program for automatically generating, running and analysing millions of lines of instruction set test cases. As well as a number of more complex test programs written in C.","tags":["Hardware"],"title":"Z80 Verilog","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3df51d057f5c70a5ac618ed50452cbe3","permalink":"/project/focusfusion/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/focusfusion/","section":"project","summary":"A Python library implementing several state of the art algorithms for fusing several out of focus images into a single sharp one.","tags":["Python"],"title":"Focusfusion","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"40aabf7a6c49400b5be0086c837dbe1c","permalink":"/project/l4re-pong/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/l4re-pong/","section":"project","summary":"The classic \"Pong\" game on the [L4Re microkernel](https://l4re.org/). Includes custom implementations of `malloc`, `free` etc. for L4Re and several server programs implementing keyboard and framebuffer handling as well as paddle control and logging.","tags":["C"],"title":"Pong for L4Re","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3eed045eaedccc310e5c761b3c8e68dc","permalink":"/project/diceprob/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/diceprob/","section":"project","summary":"A parser and interpreter for the scripting language used by [AnyDice](https://anydice.com/). Makes it possible to run AnyDice scripts that compute probability distributions of complex dice rolls locally. Written in Haskell using the `megaparsec` parser library.","tags":["Other"],"title":"Diceprob","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f427346f8687e964c967879653630b81","permalink":"/project/parallel-kmeans/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/parallel-kmeans/","section":"project","summary":"Implementation and Comparison of the k-means clustering algorithm in OpenCV, pure C, C + OpenMP and C + CUDA. Parallelization with both OpenMP and CUDA results in demonstrable speedup over the non-parallel C implementation. Includes demo code and benchmark results.","tags":["C"],"title":"Parallel K-Means Clustering","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d96a0fd064ac11a862b7ef6128e6cf9a","permalink":"/project/hello-kernel/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/hello-kernel/","section":"project","summary":"A simple 32 bit x86 bootloader and dummy kernel written for educational purposes. The bootloader is able to read and run an ELF kernel image from disk. The kernel in turn writes a greeting to the serial console. Runs under QEMU.","tags":["C"],"title":"Hello Kernel","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"31573f3033a4b798bb58b882dde0fc93","permalink":"/project/xtensa-fft/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/xtensa-fft/","section":"project","summary":"An implementation of the Cooley-Tukey FFT algorithm for one of Tensilica's Xtensa processor platforms. Uses hardware acceleration to compute the FFT more than 25 times faster for moderately large input sizes.","tags":["C","Other"],"title":"Cooley-Tukey FFT on the Xtensa Architecture","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"463dc8d6e6763d112ddcc18cc9baff49","permalink":"/project/iterative-channel-coding/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/iterative-channel-coding/","section":"project","summary":"A quantitative comparison of different iterative decoding algorithms applied to classical channel code descriptions","tags":["C"],"title":"Iterative Channel Coding","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"15eafe3d7476d2814769cb1288f770b4","permalink":"/project/linux-progs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/linux-progs/","section":"project","summary":"A collection of C/C++/Bash programs using the Linux Programming API. Written for various assignments. Includes a simple shell.","tags":["C"],"title":"Linux API Programs","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"da36d8c45d2b4152fbf8924e491e6f35","permalink":"/project/digital-design/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/digital-design/","section":"project","summary":"Design and implementation of a digital circuit that performs the LUP matrix decomposition.","tags":["Hardware"],"title":"LUP Decomposition in Hardware","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9615c301aa45d3b65b6caaa1c2dbe336","permalink":"/project/analog-design/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/analog-design/","section":"project","summary":"Design, Layout and Simulation of an integrated operational transamplifier (OTA).","tags":["Hardware"],"title":"Analog OTA Design","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]